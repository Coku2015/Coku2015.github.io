<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>数据保护 on Backup next cloud</title>
    <link>https://newblog.backupnext.cloud/categories/%E6%95%B0%E6%8D%AE%E4%BF%9D%E6%8A%A4/</link>
    <description>Recent content in 数据保护 on Backup next cloud</description>
    <generator>Hugo -- gohugo.io</generator>
    <copyright>Copyright Lei Wei</copyright><atom:link href="https://newblog.backupnext.cloud/categories/%E6%95%B0%E6%8D%AE%E4%BF%9D%E6%8A%A4/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Veeam Agent for Linux基础知识</title>
      <link>https://newblog.backupnext.cloud/post/2020-09-22-veeam-linux-agent-101/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://newblog.backupnext.cloud/post/2020-09-22-veeam-linux-agent-101/</guid>
      <description>自从年初Veeam Agent for Linux 4.0（简称VAL）随着VBR V10推出以来，这个功能越来越强大的备份代理使用也越来越广，不管是云上还是云下、虚拟还是物理，总有场景会用到VAL。然而我们发现对于刚刚接触VAL的朋友们其实还是会受到这个代理安装过程的困扰，就算是全自动的推送安装，依然会有朋友会碰到各种各样的安装问题。这让本来以使用体验极佳著称的Veeam备份软件变得很尴尬，“It just works!”的口号都不敢随便喊了。
其实，Veeam还是那么简单，VAL一样是这种简单极致的体验，就算是在大众门槛略高的Linux开源世界，只需要稍稍注意，就可以体验到VAL的极致简单使用体验。当然这需要一点点小技巧，对于熟练使用Linux的朋友，这些都不是问题，而对于不少只是因为要备份才接触Linux的备份管理员来说，会略有一些挑战。这主要原因是来自于VAL的软件安装依赖包，和Windows不一样的是，Veeam在所有Windows Server所需要安装的依赖包都集成在Veeam软件中，VBR会全自动的去推送所有缺失的依赖包。而对于Linux来说，在Veeam软件包中其实并不包含任何的依赖包，所有这些依赖包都来自于Linux系统本身的Software Package Manager，这里要划个重点！
什么是Package Manager？
打个比方，这个就是和手机的应用市场类似，每一个Linux系统都内置了这样的Package Manager，而不同发行版的Linux可能会使用不一样的Package Manager。Package Manager非常的智能，通常在主流的Linux发行版中安装软件最简单的方法就是通过Package Manager的一行命令就完成了，Package Manager会全自动的完成所有依赖组件的安装，最终交付相应软件给管理员使用。
在VAL支持的多种操作系统中，不同的系统使用不同的Package Manager，下面就是这些系统所对应使用的Package Manager清单。
   Linux发行版 默认常见的Package Manager     CentOS/Redhat/Oracle Linux/Fedora yum   Debian/Ubuntu Apt   SLES/openSUSE zypper    很显然，不管使用什么方式，我们要正常安装VAL，第一个前提条件就是Package Manager能够正常的工作，这个在有互联网连接的Linux系统中，完全没问题，绝大多数情况下系统安装完成后就自带了合适的软件安装源；然而在无法访问互联网的服务器数据中心，如果没有合理配置内部源，就会碰到各种报错了。处理方法也很简单，只需要去对应的Linux发行版的官网，下载当前版本的最新版ISO，并制作成本地源即可。比如，CentOS6.x就下载CentOS 6.10的iso，CentOS 7.x就下载CentOS 7.8.2003的iso镜像，然后挂载到CentOS中。本文以常见的CentOS 7.6为例说明下这个配置的全过程。
 首先找一个CentOS 7.8.2003的镜像下载点，比如阿里云的 https://mirrors.aliyun.com/centos/7.8.2003/isos/x86_64/ 在CentOS中，挂上这个刚刚下载到的镜像。  [centos@localhost ~]$ sudo mkdir /mnt/cdrom [centos@localhost ~]$ sudo mount /dev/cdrom /mnt/cdrom 备份并移动/etc/yum.</description>
    </item>
    
    <item>
      <title>Veeam Availability for Nutanix AHV配置和使用系列（一）</title>
      <link>https://newblog.backupnext.cloud/post/2018-07-28-van-01/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://newblog.backupnext.cloud/post/2018-07-28-van-01/</guid>
      <description>Veeam Availability for Nutanix AHV（下文简称VAN）正式发布了，本文详细介绍下这一新工具的使用方法。
此次的软件发布以Proxy Appliance形式，到Veeam官网直接下载Zip包解压即可得到一个Disk Image，这是一个vmdk文件。和其他Veeam软件一样，这里官网依旧能够申请到一个30天的试用许可。
VAN的架构解析：
由于VAN的特殊性，这个下载得到的Appliance并不能直接使用工作，它是Veeam Backup &amp;amp; Replication的一部分，需要依赖Veeam Backup &amp;amp; Replication一起才能实现Nutanix AHV的数据保护。其架构如下图：
所以，如果是一个单一的AHV环境，我们还是首先需要部署一套VBR，完了之后再开始VAN的部署，而VBR中也需要激活相应的Zero-Socket VBR ENT+的许可，才能完全发挥VAN的所有功能。本文对于VBR部分就不详细展开说明，请参考官网手册。
VAN部署方法：
 上传镜像至Nutanix 镜像库中，在Prism上选择配置镜像。  打开配置镜像对话框，选择上传镜像。  为新的镜像输入名称、备注，选择镜像类型为Disk，选择合适的Storage Container，然后指定刚刚解压开来的这个vmdk的路径后，点击保存。  等待一段时间，AHV系统经过上传、初始化之后，任务栏在完成所有任务后，我们再次打开配置镜像对话框后，会发现我们上传的VeeamProxy这个镜像意见处于Active的状态了。  接下去我们开始利用这个Image来创建VM，这个VM就是Nutanix中用来提取数据的引擎，它和VMware环境的中的Proxy非常相似，只是这个是Veeam封装起来的一个Linux。  创建VM过程也是非常简单，按照手册中的建议配置填即可，2vCPU/2Core/4GB Memory，新增一块磁盘，选择镜像库中的源作为磁盘，然后指定一个网络地址用于初始化访问。
这样，VeeamProxy for AHV就创建好了。在AHV上开启这个虚拟机，经过简单的初始化后，即可进入系统，系统命令行提示，可以通过一个https的地址访问到VAN并进行初始化配置。到这个步骤，其实Nutanix上的所有操作已经完成，接下去就是进入VAN界面进行Veeam Proxy的初始化配置了。  浏览器打开Proxy Appliance地址，纯黑的界面，配上绿色的Veeam Logo。输入默认的Admin后即可进入Proxy Appliance首次配置向导。  新的Proxy Appliance第一次进入可以选择是全新安装或者从配置文件进行恢复，这里我先选择了全新Install。  进入安装向导后，首先需要接受一个最终用户许可协议（End User License Agreement），勾选Accept之后点击下一步。  重新设定Admin的密码，进入下一步网络设定。  为Proxy设定主机名以及ip地址。  回顾一下设定内容后，点击Finish后系统会进行一轮重启，然后初始化配置就完成了。  接下去再次进入Proxy Appliance的web console，会提示输入License，所有Nutanix的许可都会在Proxy Appliance上直接管理。从这步开始，需要对这个Proxy Appliance进行三项基础配置设定，使其能够进入正常工作状态。  点击右上角齿轮配置图标，进入配置界面，在这里分别激活License、配置VBR Server以及添加Nutanix Cluster。操作交互方式也非常简单，一些基础信息足够完成配置。  首先是License，和其他Veeam的License一样，导入.</description>
    </item>
    
    <item>
      <title>Veeam Availability for Nutanix AHV配置和使用系列（二）</title>
      <link>https://newblog.backupnext.cloud/post/2018-07-30-van-02/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://newblog.backupnext.cloud/post/2018-07-30-van-02/</guid>
      <description>上一期介绍了《Veeam Availability for Nutanix AHV的安装和配置》，本期来说说VAN的备份和恢复。
备份AHV的虚拟机
VAN的所有备份操作依旧是以备份作业方式，但是和VMware/Hyper-V不同的是，Nutanix AHV的VM备份作业都会在VAN Console中进行，而不是VBR上。
进入VAN Console中，上面的菜单非常简单，顶部从左向右分别是仪表盘、备份作业、已保护的虚拟机、事件这4个页面。
备份作业可以进入Backup Jobs中设定，同时在这里也能查看到备份作业的运行状态。
备份作业设定步骤
 在Backup Jobs页面中，点击Add按钮就可以新增备份作业。设置过程还是Veeam经典的向导模式，5个步骤就能完成所有设定操作，非常简洁。  第一步，和VBR中的设定一样，是Job Name和Job Description，根据实际情况输入信息即可。
选择备份哪些VM，这里和vSphere/Hyper-V还是非常像，可以选择非VM的对象，比如一个Host或者一个Cluster。  点击Add即可打开Nutanix AHV的对象选择，和vSphere/Hyper-V不一样的是，这里会提示哪些VM处于Unprotected状态，这能很好的避免重复备份，也能快速定位哪些VM没有备份。
选择备份至什么位置，这里会列出VBR中已经设定了Allow权限的Repository，可以选择普通的Repository，也可以选择Scale-out Repository。  设定计划任务，此处的界面会稍微有点不同，个人认为这一新的Web界面让Schedule选择变得更加美观，而计划任务的逻辑则和原来的VBR是完全一致。  最后一步review一下以上设定后，备份作业就设定完了。备份作业会在指定的时间自动开始运行。  查看备份状态
而备份作业运行后，我们可以在VAN Console或者VBR中查看到备份状况，而VBR中并不能做任何的编辑，仅能查看状态。
还原AHV的虚拟机
VAN的还原可以在VAN Console中操作，也可以在VBR Console中进行。但是在这两个控制台中能做的操作会有些差别。
VAN Console还原
在VAN Console中，Veeam提供完整虚拟机还原和虚拟磁盘还原。
完整虚拟机还原
 点击Restore按钮，会打开还原向导。  点击Add添加需要还原的虚拟机。  点击Point按钮，可以选择适合的还原点进行恢复。
进入下一步后，可以选择还原位置。对于原始位置，没有太多选项，是对原有虚拟机的直接覆盖，而选择恢复到新位置时，可以输入更多配置，变成一台新的虚拟机。  设定新的VM name，和原始VM名称不同。
选择合适VM Container，默认这里是原始的位置，可以根据实际情况选择新的节点和新的Container。  输入合适的还原理由后，可以开始VM的完整还原。  部分Disk还原
 点击Disk Restore，可以启动单个virtual disk的还原向导，选择需要还原的VM  选择合适的还原点。  设定Disk映射关系。
设定完Restore Reason后，点击Finish即可进入恢复过程。  VBR Console 还原</description>
    </item>
    
    <item>
      <title>Veeam Cloud Tier – 云对象存储使用详解（一）</title>
      <link>https://newblog.backupnext.cloud/post/2019-02-21-cloud-tier-01/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://newblog.backupnext.cloud/post/2019-02-21-cloud-tier-01/</guid>
      <description>2019年1月23日Veeam发布了其产品历史上功能最多的一次Update包 VBR 9.5U4，其中包含了一系列和云相关的功能模块，本文将会详细讨论其中最主要的一个特性：云对象存储。
在VBR 9.5U4中，可以使用Amazon S3、Microsoft Azure Blob、IBM Cloud Object Storage以及其他各种兼容S3协议的对象存储，因此，对于我们国内用户AliCloud OSS和Tencent Cloud COS也能够完美支持。
云对象存储的定位
在VBR中有三大类Repository，分别是Backup Repository、External Repository和Scale-Out Backup Repository（SOBR）。我相信对于绝大多数Veeam使用者，Backup Repository是再熟悉不过了，那是Veeam存放备份数据的磁盘位置，也是以往被使用最多的数据存放方式。External Repository是VBR 9.5U4新增的，这个并不是本文云对象存储涉及到的部分，本文暂且不讨论。而SOBR，在以前的VBR版本中，可能鲜有提及，而在未来，这将可能成为Veeam最主要的数据存储方式。
在了解云对象存储之前，我觉得有必要来回顾一下SOBR的组成，每个SOBR都会由1个以上的Extents组成，每个Extents其实就是一个常规的Backup Repository，也就是说，SOBR就是一个Backup Repository的集合，这是以往SOBR的基本组成。
在这个全新的SOBR中，Veeam把它分成两个层级，分别是Performance Tier和Capacity Tier，所有本地磁盘组成的Extend都被归类为Performance Tier，而云对象存储组成的Extents则被归类为Capacity Tier。
工作原理
简单来说，含有云对象存储的SOBR必须由1个以上的Extents组成，然后必须包含1个云对象存储。
 每隔4小时，Veeam会根据SOBR中的保留策略设定自动运行SOBR Offload任务，将本地需要上传至云端的数据上传至云端的对象存储中。 相对的，SOBR Download任务则对应可以将云对象存储中的数据取回本地Extents之中。  而在还原过程中，云对象存储可以说是近乎于透明状态的存在，它和以往任何的存储解决方案都会不一样，在Veeam中，云对象存储上的还原点，可以保留其原有的任何还原能力，以完全源生平滑的方式来进行数据还原。
我们来看一个实际的例子：当进行数据还原时，选择的还原点位于云对象存储上时，Veeam首先会去读取本地的数据索引（Index），这个Index会告诉Veeam，哪些数据同时存在于云上和本地，那么在读写数据时，Veeam将会优先去使用本地的数据作为数据源，而只会从云中获取那些本地不存在的数据。这将大大减少云对象存储的使用费用，因为绝大多数的云对象存储的使用计费会更多的按照请求和回流来计算。
管理和操作
1.添加云对象存储
上文提到过，云对象存储也是属于SOBR的一个Extents，而Extents则是一个Backup repository，因此添加云对象存储的入口就是Add Repository。
在Add Backup Repository中会新增一个向导Object Storage，这就是添加云对象存储，其中包含了上文提到的4种不同的协议。
添加过程非常简单，如同任何Veeam功能一样，以交互的方式填入合适的信息即可完成配置，本文就不做官方User Guide的复读机了，可以根据实际使用的云对象存储选择合适的存储类型进行添加。
https://helpcenter.veeam.com/docs/backup/vsphere/new_object_storage.html?ver=95u4
配置SOBR和Capacity Tier  在Backup Infrastructure中找到Scale-Out Backup Repository，然后点击Add来新增，这时候需要首先配置Performance Tier。关于Performance Tier的配置详细选项，本文就不展开进行详细讨论，有需要的可以查看官方User Guide中的相关章节。
https://helpcenter.veeam.com/docs/backup/vsphere/sorb_add_extents.html?ver=95u4
选择默认的Placement Policy后，就可以进入Capacity Tier的配置，这时，在上一步中配置的云对象存储库就会出现在下图的List中，同时在这个页面上我们也可以配置如何去进行SOBR Offload任务，也就是我们前面提到的SOBR的保留策略。
设置完本页内容之后，云对象存储的配置就完成了。
3.使用操作</description>
    </item>
    
    <item>
      <title>Veeam Cloud Tier – 云对象存储使用详解（二）</title>
      <link>https://newblog.backupnext.cloud/post/2019-03-04-cloud-tier-02/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://newblog.backupnext.cloud/post/2019-03-04-cloud-tier-02/</guid>
      <description>上期介绍了Veeam云对象存储使用的基本方法，但是文中有些内容略微有些小错误，在此不再放入该推送的链接，如有需要，请大家后台回复：Cloud或者云调取阅读更新后的版本。本期内容给那些想更深入了解该技术的朋友们。
或许已经有人注意到，在使用Veeam云对象存储以后，不管备份存档是位于本地数据中心还是位于云上对象存储中，Veeam均提供各种丰富的还原手段，其中包括最重要的Veeam于2010年首创的经典技术 – Instant VM Recovery，关于这个技术的详细使用，可以参考之前的推送：
 Veeam黑科技之vPower NFS。  云对象存储特殊属性，各家云厂商在定价上几乎无一例外的采用4个维度来制定收费策略，分别是：容量、读写请求次数、读取数据量、订阅服务时间，这和传统存储设备一次性买断投资的特性完全不同，因此对于长期不使用的数据，存放在云端时，读写请求和读取的费用会变得非常的低，这也是对象存储作为归档异地存放的最佳属性。
但是，这并不意味着备份厂商可以无责任的随意使用对象存储，如果把对象存储当做和传统本地存储一致的属性来对待时，对于传统设备的随意读写的这些操作，特别是做数据校验、数据整理、恢复校验、定时重删任务等读写操作，会给用户带来额外巨大的I/O和读取费用。因此Veeam为存放到对象存储上的数据做了重新打散处理，并且定义了一系列的存取规则，以确保数据可用性的前提下，尽可能少的使用读写I/O和读取数据量，降低云端对象存储的使用成本。
元数据（Metadata）和数据块（Block） 每个Veeam的备份存档（.vbk、.vib、.vrb）都会由Metadata和Block组成，在每个本地存储的存档中，Metadata和Block是密不可分的，通常就存在于同一个文件中。而数据被传送到云端对象存储时，Veeam会将两者拆分开来，在各自的目录中，单独存放相关数据。而本地磁盘上，Veeam会保留Metadata，以便能够在恢复时快速找到对应的Block。
索引（Index） 索引通常在SOBR Offload Job启动时生成，其内容包含了.vbk、.vib、.vrb这些文件中，各切片数据块的哈希值（Hash），Veeam从备份存档的Metadata中提取这些Block的哈希值。生成这些哈希值后，Veeam会首先把这些内容存放在Scale Out Backup Repository下该backup job对应的Extents目录下的ArchiveIndex目录中。在以后的任何一次数据传输中，如果有数据块的哈希值和已有的哈希值相同，那么Veeam将会重复利用这些已经传输的数据块，而不会再进行传输，避免浪费带宽。
需要注意的是，这个索引是基于完整备份链（Backup Chain）生成的，也就是说，对于两个不同的Backup Job，即使对于同一台VM做了Backup，实际上在上传到对象存储的时候，就算数据块拥有相同哈希，也会被重复上传。由于这是整个备份链中的数据块信息，因此，每次的备份链发生变化，那么在下一次执行SOBR Offload Job时都会重新生成这个索引。
这个索引中的内容，同时包含了某一数据块在云端对象存储中和在本地磁盘存储中的位置信息，如果某一数据块同时存在于3份不同的全备份存档中，其中两份位于本地磁盘中，一份位于云端对象存储上，那么索引会将这些信息都记录下来。当需要执行SOBR Offload Job进行新数据上传时，VBR如果发现新的上传数据中需要上传这份云端已有数据，那么VBR会跳过该数据块的上传，同时在本地和云端更新相应记录，以此来节省上传带宽和节省上传时间。
当需要还原时，同样的，VBR会判断被还原的数据块中的哈希值，如果发现索引中有提到本地磁盘中还存放着这些数据块，那么VBR会优先选用本地磁盘上的数据作为还原读取的源，从而大大节省从云端对象存储中读取的数据量。
而正是这个原因，也使得选用云端对象存储上的数据执行Instant VM Recovery变得可行。
备份链的活跃部分和非活跃部分
只有备份链的非活跃部分，才能被上传至云对象存储中。无论是手工操作还是自动任务，处于备份链活跃部分的还原点，无论如何都将不会被上传至云对象存储上。
这也是本次更新后Veeam对于备份链新引入的两个概念，这是在了解云端对象存储数据上传任务中非常重要的两个概念。介绍这两个概念之前，我们来复习下备份链（Backup Chain）的定义：在Veeam的备份存档中，存放在存储介质中的数据以备份链的形式存放，以普通增量备份为例，一般存放结构如下图所示，那么对于一个Backup Job而言，这一组文件的集合，被称之为备份链（Backup Chain）。
而备份链的活跃部分和非活跃部分则是以最后一次全备份为分界线，在最后一次全备份之前的部分，我们称之为备份链的非活跃部分，而在最后一次全备份之后的所有增量备份和该全备份，被称之为备份链的活跃部分。如下图所示：
当然这依然是以普通增量备份为例，对于反向增量备份、永久增量备份、Backup Copy，情况会略有不同，但是基本规则也和上面提到的一致。
随着时间的推移，作业的进行，早期的还原点（Restore Point）将会因为新的全备份的产生而被转换为非活跃，从而实现Offload操作。
总结一下，哪些数据将会被上传至云对象存储中：
属于备份链的非活跃部分的数据； 早于Capacity Tier中设定的日期的数据； 这个Block是否之前没有在这个Backup Job中被上传过。 这个3个条件验证完后，数据将会被决定是否会上传。
以上就是本期对Veeam Cloud Tier的深入分析。</description>
    </item>
    
    <item>
      <title>Veeam FAQ系列转载</title>
      <link>https://newblog.backupnext.cloud/post/2019-03-21-veeam-faq/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://newblog.backupnext.cloud/post/2019-03-21-veeam-faq/</guid>
      <description>最近有很多Veeam今年新版本特性的系列文章，包括很多云端数据管理的话题，有兴趣的朋友可以参考Veeam云架构师Mars Zhang的系列推文：
Veeam 9.5 U4 新功能，利用 Cloud Mobility 实现迁移即服务
Veeam 云端数据管理新功能，打造BaaS备份即服务 （一）
回归到Veeam最原始的功能，最近开始回过来做做基础知识普及，本系列内容较长，因此分多期推送，这里内容来自于Veeam官方论坛置顶帖，如果有想看原版的，可以直接通过原文链接跳转。
本文纯技术内容，纯纯的干货，就不开篇废话了，直接进入主题：
Architecture
问：请问Veeam备份数据流的流向顺序？
答：磁盘&amp;gt; Backup proxy &amp;gt; 网络&amp;gt; Backup repository &amp;gt; 磁盘
Backup Proxies
问：什么是Backup Proxy Server？
答：Backup Proxy从生产存储中提取虚拟机数据（配置文件和虚拟磁盘），通过应用重复数据删除和压缩来处理数据以减小虚拟机数据的大小，并将虚拟机数据发送到Backup Repository（在备份的情况下）或其他Backup Proxy （在复制的情况下）。 Backup Proxy还用于在还原虚拟机时将虚拟机数据（配置文件和虚拟磁盘）写回VMware的生产存储，以及用于虚拟机的复制。
问：为什么最好在物理机上安装Backup Proxy？
答：由于大量数据流（高达每秒几千兆字节）的即时处理（重复数据删除和压缩）需要大量的CPU，内存和I / O资源，物理Backup Proxy最适合24/7虚拟化环境，具有高整合率。否则，您可能会发现备份过程会影响生产。
问：我可以在什么操作系统上安装Backup Proxy？
答：Microsoft Windows 7 SP1 / Server 2008 SP2 64位操作系统或更新版本.
问：我是否必须设置Backup Proxy才能开始使用产品？
答：不，因为安装程序会自动部署默认Backup Proxy。 但是，我们建议您添加额外的Backup Proxy以实现冗余和负载平衡。 有关最佳部署额外Backup Proxy的建议，将会在后续章节中详细说明。
问：Backup Proxy可以备份自己吗？
答：是的，Backup Proxy可以备份自己和任何其他Veeam Backup &amp;amp; Replication组件。
Synthetic Backup</description>
    </item>
    
    <item>
      <title>不知勒索病毒的攻击原理，怎知如何防御？</title>
      <link>https://newblog.backupnext.cloud/post/2019-06-10-ransomeware-attack/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://newblog.backupnext.cloud/post/2019-06-10-ransomeware-attack/</guid>
      <description>勒索病毒个话题，貌似近一两年是一如既往的火热，还记得一年多前刚刚爆发的时候的那些停止服务的图片吧，相信绝大多数没中招的同学都是以一份看热闹的心态去看这些图片。我也不能免俗，借了一些来晒在当时的推送中。热点蹭一下，算是也涨了点粉丝量。
原本以为，这一话题早应该结束了，随着安全补丁的修复和安全防护的加强，勒索病毒不会太长命。而事实上并非如此，勒索病毒也不断演进，看上去这一来一回的攻防战，打的越来越有意思。
勒索病毒基础小课堂
我相信，大家都已经非常清楚所谓的勒索病毒是一类什么样的病毒，它的攻击流程无非就是：
 加密一切被感染的文件； 通过各种方式联系文件的主人，要求支付赎金；  通常和碰到勒索病毒的同学的对话，就往往变成了如下：
倒霉的管理员：我丢，中招了，我的所有的资料全部被锁了，它们要我付10个比特币，怎么办？
石头哥：备份了没？
倒霉的管理员：没！
石头哥：嗯，去付钱吧，祝你好运！
没有备份的情况下，在这之后，会发生什么事情，我觉得真不好说，这两年的各种调查报告也很多，事实上真正能付了钱拿回数据的人，占总人数的1/4不到。
勒索病毒的进化
最近，看到一些评论，都在讨论现在的勒索病毒是越来越智能，以至于它们能够深入到用户的环境中自我复制、自我传播，同时它们还会去禁用一些主流的杀毒软件、备份软件、防火墙以及数据库，来确保达成勒索的目的。其中有些凶残的病毒甚至还带破坏和删除功能，对于主流已知的备份软件Catalog库进行深度分析，破坏发起后，为了达到勒索的目的，除了破坏生产数据，还同时去破坏备份数据。
这时候，碰到勒索病毒的同学的对话会这样：
倒霉的管理员：我丢，中招了，我的所有的资料全部被锁了，它们要我付20个比特币，怎么办？
石头哥：备份了没？
倒霉的管理员：备了，但是它们太聪明了，把我的备份服务器感染了，禁止了我感染那天以后的所有备份作业，同时删除了我的备份catalog文件。
石头哥：还有数据可以恢复吗？
倒霉的管理员：数据放在EMC DataDomain中，通过最新的文件锁协议（File Locking protocols），倒是挺安全，但是catalog没了，再安全的备份存档数据块都无法恢复了。
石头哥：好吧，去付钱解锁吧！
虽然用备份软件做了备份，但是水平还是没高过勒索软件，没有充分考虑到备份软件也会被勒索软件破坏，备份形同虚设。
下图是某勒索病毒的样本分析中找到的，它能禁用的一系列常见服务。它能做到破坏数据之前，先处理那些干扰他搞破坏的元素。可以看到市场上常见的杀毒软件和备份软件的服务都在这个清单上。
备份/灾备的应对策略建议
有了备份，也不安心，所以，在设计备份/灾备架构的时候，需要考虑很多因素：
 备份存档的独立性和可移动性。  越来越多的客户开始意识到这一点的重要性，如果现在的备份存档，还无法做到自我恢复，完全依赖于备份软件所建立的Catalog，那么破坏了Catalog就相当于破坏了一切。
相反，对于一个没有Catalog的使用Veeam备份的环境，这事情就简单太多了，每份存档就相当于一个个体，勒索病毒需要个个击破才能达到它勒索的目的，我相信，聪明的你肯定能把你最重要的数据存放中最安全的地方，而避免受到勒索病毒的感染。
那么这时候，假设很不幸，你的备份服务器被感染了，狠一点的勒索病毒直接破坏磁盘MBR记录，在启动的时候就拒绝你进入系统。这时候你需要做的事情很简单：
 清理恢复完你的环境，确保已经杀干净勒索病毒。 安装一套全新的VBR。 只需要从你最安全的磁带中，拿出之前备份下来的VBK文件。 导入到新的VBR中，veeam不需要任何集中管理的catalog数据库或者重删库，就能识别每个备份存档内容。 使用各种恢复方式，和正常的Veeam恢复方式完全一致，包括Instant VM Recovery和Instant File Recovery。  多份备份数据的安全隔离性。  存放数据的时候，千万记得别用同步功能，企业数据和个人数据一样。拿个人数据举例，如果你有个百度盘，或者Onedrive，这时候你要把你的数据备份到云上。偷懒的做法是后台开启自动同步，一旦数据写入你的磁盘，这些网盘工具会做一个自动同步，近乎实时的把数据同步到云端。而试想一下，这个数据写入磁盘的动作假如是由勒索病毒发起的，那么你的云端的所有数据也将会被你的这个自动同步操作的给感染。这样你设置的所有备份防御措施都将失效。
同理，在企业数据中心，偷懒的存储级同步方法，甚至是某些厂商宣称的字节级同步方法，在勒索病毒看来，这是多好的手段，让攻击范围自动蔓延，自动传播啊。
所以，我强烈建议，把自动挡改成半自动挡，拥有自动挡的技术没有问题，但是在必要的情况下，调整成定期数据的复制，会大大降低数据感染的风险。
数据多存放几份，多存几种介质都是很好的方法，来避免被全方位攻陷。对于勒索病毒来说，本身它是一种自动执行的计算机软件，全自动化的进行攻击，很少会有人工手工干预的攻击，因此改变正常的数据存放规则和套路是一个好方法。当然这个前提是，备份软件足够灵活，能够支持各种各样的存储设备。
备份存档的定期验证和自动化恢复演练。  这又是一个很有意思的话题，可恢复性验证，这备份和灾备环境中，要去做这个验证通常都只能手工去做，这会消耗大量时间和资源。在没有勒索病毒出现的时候，这个验证仅仅是为了对付下领导，对付下监管，这也许交一份书面报告也就过去了。然后勒索病毒横行的今天，我们真的得好好想一想，要是哪天勒索病毒把我的环境破坏了，那我的哪些备份存档是没有勒索病毒感染的，能够正常恢复的干净系统？
全自动的备份存档验证在这样的场景下，能够帮助备份管理员省下不少时间和资源。而加入了更多自动化校验逻辑的Veeam Availability Orchestrator 2.0则是这方面的小能手。
来吧，和勒索病毒斗智斗勇吧。
没有任何一个软件可以做到没有漏洞，没有任何一个软件可以做到完全免疫任何攻击。我认为只有更好更合理的去存放数据，并且持续的去检查数据，才能够在这场勒索病毒持久战中坚持到最后。</description>
    </item>
    
    <item>
      <title>利用Veeam U-Air恢复MySQL数据库</title>
      <link>https://newblog.backupnext.cloud/post/2018-04-10-uair/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://newblog.backupnext.cloud/post/2018-04-10-uair/</guid>
      <description>常常被问及Veeam是否支持某某数据库/应用程序的对象恢复，其实这个问题的答案和问题中提到的 某某数据库/应用程序 完全没有关系，这类问题的答案永远是肯定的。因为Veeam有一个超强的恢复工具：U-AIR（Universal Application-Item Recovery）
今天我就以MySQL为例，给大家详解一下这个恢复工具。
先来看看今天的备份存档，这是一个安装在CentOS上的MySQL 5.1.7，我使用Veeam Backup &amp;amp; Replication对其进行备份，备份过程中执行了Pre-freezing和Post-freezing脚本确保其数据一致性，关于此脚本，大家可以参考Veeam官网的白皮书，因为Veeam白皮书实在太详尽，我就不在此处担当复读机啦。
具体链接如下：
https://www.veeam.com/wp-consistent-protection-mysql-mariadb.html
对于源虚拟机上，我的MySQL中有以下这些测试数据：
然后这个状态的这台MySQL虚拟机我做了一次备份，这时候因为一些意外原因，我的veeamlab这个database被破坏了，我需要通过备份，将这个veeamlab database还原出来。此时，坏了的veeamlab将会被我弃用，而我会新建一个空的veeamlab_recovered作为新的目标还原库，而这时MySQL则是一切正常状态。
接下去，我的还原过程开始了，启动Universal Lab Request Wizard来申请一个之前的备份存档，用于还原，申请过程非常简单。
给出需要申请的VM Name，这里完全支持模糊名称。
还原点我选择最新一份。
完成之后提交申请。
至此，U-AIR恢复申请提交完成，须等待备份管理员审核还原申请。
我接下去通过Veeam Enterprise Manager来到备份管理员视图，进行此次还原申请的审核。
Approve过程也非常简单，在这里完全用到Veeam SureBackup/Virtual Lab的功能，具体SureBackup/Virtual Lab的配置可参考之前的推文 。《备份存档能不能被恢复，这件事情上只有真正做过才知道。》
这个审批过程，Veeam会自动找到合适的虚拟机备份存档：
会选择合适Virtual Lab和SureBackup Job作为还原的临时环境：
如此，审批过程就结束了，接下去，在数据库管理员这端，等待一小段时间后，将会获得临时还原环境的访问信息。
通过172.20.1.139，我ssh到这台还原环境中，而此时我原来的10.10.1.139还是处于正常运行状态。检查临时的还原环境中的数据库情况如下：
数据一切正常，接下去，我需要做一件事情，就是将这里的数据提取出来，然后传输至原来的10.10.1.139中，进行还原。我使用mysqldump命令来提取数据。
提取完后，数据存放至/tmp/mysql/veeamlab.sql文件中。
然后我们回到原机器10.10.1.139中，使用Virtual Lab中Static IP Mapping技术，我设定了能够让所有机器通过10.10.1.138这个地址访问到虚拟实验室中的临时还原环境，这时候，我可以从10.10.1.138中抽取这个dump进行还原。
还原命令依旧非常简单：
至此，所有数据还原工作完成，我们看到我们希望还原的数据已经全部找回。数据库管理员可以提前终止UAIR环境，也可以让它在使用时间到期后自动回收。
好了，今天恢复MySQL的样例就是这些，这个恢复没有太多前提条件，唯一的条件就是使用Veeam Backup &amp;amp; Replication，有了Veeam您就能和我一样进行如此轻松的进行任何数据库/应用程序对象的恢复了。</description>
    </item>
    
    <item>
      <title>加速！加速！加速！（一）</title>
      <link>https://newblog.backupnext.cloud/post/2017-08-01-speed-up-01/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://newblog.backupnext.cloud/post/2017-08-01-speed-up-01/</guid>
      <description>一直很少去谈论速度和性能，就像一辆好车，我认为这个是基本配置，然而这个基本配置对于任何一辆车来说都是极其重要的。对于备份领域来说，驱动备份和还原速度的引擎就像汽车的发动机，是一个备份软件真正展现其价值的重要部分。我想就这个问题，来详细讨论Veeam的加速技术。今天的内容是加速系列的第一部分 – 备份加速引擎。这一引擎在备份软件中不仅仅是帮助了实现备份功能，更是Veeam去帮助客户实现IT可用性的重要保障
Veeam备份加速引擎
和其他使用VMware vStorage API for Data Protection（VADP）的备份软件不一样，除了软件传输服务中集成了VMware Virtual Disk DevelopmentKit（VDDK）之外，Veeam额外加入了一套优化数据提取的组件：Veeam Advanced Data Fetcher（ADF）。这个ADF简单来说就是为企业级存储阵列额外增加了超过2倍读取性能的列队深度，这个带来的直接的效果就是极大地加快了从vSphere平台数据源读取数据的速度。相比同类的备份产品，在从源端读取时，效率上有成倍的提升，并且ADF还降低了读取数据需要的I/O操作数量，从而有效的降低了读取相同容量的数据时对于生产存储的I/O压力.
当然，Veeam还为这个ADF配备了一个智能的调控开关Backup I/O Control。当从生产读取速度并不快时，其实备份软件完全不需要考虑会不会对生产造成影响，可以说是完全可以忽略生产环境。当我们的速度足够快时，必须考虑到生产存储的负载能力，在生产对外服务的同时还要同时高效的完成备份，这就不是拍脑袋想多少是多少了。
Veeam ADF和Backup I/OControl的协作可以完全智能地去完成对生产存储的控制，通过自动感知生产存储Latency技术，动态控制ADF的吞吐量来实现在有效的Latency范围内进行备份。
在以往，一个备份管理员，通常会设定每天执行一次备份的数据保护策略，并且将这个备份时间段设定在晚上业务相对不繁忙的时间。这样的设定RPO就是24小时，究其原因并不是说管理员保守，而是因为没有很好的智能控制手段，所以备份要为生产让路，保证可用性的前提下去进行备份。然而现在Veeam的引擎，Veeam ADF和BackupI/O Control的协作，可以让备份管理员在不影响生产的情况下，在任何时间段完成备份，从而有效的提升备份的RPO。
所以，Veeam不仅仅是完成了备份这么一件大家能用各种方式实现的事情，可能殊途同归，但是Veeam的技术是让在完成备份的同时达成可用性目标，关键业务的备份可以在任何时间进行，而不是备份必须在维护停机窗口进行。24×7×365的可用性保证从做备份做起！
下期预告：
vSphere通讯加速技术 - 虚拟化备份前，备份软件需要花大量时间与虚拟化平台通讯，这是整个备份作业中第二大耗时作业，全新的Veeam Broker Service能够帮助极大提升这个速度，节省时间。</description>
    </item>
    
    <item>
      <title>加速！加速！加速！（二）</title>
      <link>https://newblog.backupnext.cloud/post/2017-08-07-speed-up-02/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://newblog.backupnext.cloud/post/2017-08-07-speed-up-02/</guid>
      <description>上一期，我们讨论了备份引擎的加速，这对尽可能快的完成备份提升RPO有着极其重要的意义。然而除了这个数据传输引擎之外，在备份时还有一个加速器，那就是vSphere通讯加速技术。
Broker Service
这是Veeam9.5中新增加的一个特性，简单来说这项科技给备份带来的帮助是在Veeam和VMware vCenter之间加入了一个过渡服务，当Veeam每次发起任务时，需要查询vSphere信息时，可以替代性的去查询BrokerService而不用直接去找vSphere。
如下图，这是有无BrokerService的一个直观对比，没有Broker时，每次备份任务都会去直接和vCenter通讯，其获取返回结果的耗时完全取决于vCenter性能和网络状况。而在有了Broker之后，Veeam则会去查询Broker中缓存的信息，而由Broker保持和vCenter处于update状态。
那么这个Broker事实上在Veeam软件中是以一个服务的形式存在，因此我们在Services.msc中可以查看到这个Service:
这个Broker在工作的时候，VMwarevCenter中清单基础架构的任何变化都会实时的被推送至Broker的缓存中，而如果Veeam未收到任何推送变化的情况下，默认Veeam会每15分钟（900秒）进行一次强制更新缓存，确保缓存内容的准确性。
所以，这带来的好处显而易见，以下是一组软件中截图的对比，在无Broker的情况下，Veeam备份任务通过查询vCenter来创建备份虚拟机列表，消耗了40秒时间：
而在有了Broker之后，Veeam备份任务查询Broker来创建备份虚拟机列表，仅需要耗时1秒：
这可以说效率提升了40倍以上！！
好吧，为了让你的备份速度飞起来，升级到Veeam 9.5Update2吧。
下期预告：
备份速度快不算啥，这都不是啥大事，划重点的来了，真正要快的还原技术，而Veeam除了有Instant VM Recovery之外，其他的那些还原技术会不会也很快？下期为你揭晓答案。</description>
    </item>
    
    <item>
      <title>备份存档能不能被恢复，这件事情上只有真正做过才知道。</title>
      <link>https://newblog.backupnext.cloud/post/2018-03-05-surebackup/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://newblog.backupnext.cloud/post/2018-03-05-surebackup/</guid>
      <description>Veeam有一个非常特别的功能，它能够全自动的在线验证备份存档的可用性，确保备份下来的内容是能够被正常恢复的。
该功能之所以能够确保恢复，是因为它会将备份存档在一个隔离的环境中以一个正常的虚拟机的形态启动起来，然后通过一系列的仿真测试去全自动的测试这个虚拟机的状态，包括了虚拟机的心跳、虚拟机网络的连通性甚至是虚拟机内应用程序和服务的运行状况，在测试完成之后，它还会生成一份验证报告，给出该备份存档可恢复性的相关结论。
Veeam SureBackup适用于VMware和Hyper-V的备份，本文仅以VMware环境为例说明SureBackup的技术原理以及使用方法。
如何工作？ Veeam SureBackup在工作时，会依次执行以下步骤完成整个验证过程：
  Veeam Backup &amp;amp; Replication会将Application Group和被验证的虚拟机发布到一个隔离的沙盒环境中，通常我们称作为“数据实验室（DataLab.）”。这些虚拟机是直接从备份存储库的被压缩重删后的备份文件中启动，而不需要被预先还原至VMware的Datastore中。实现这一功能需要依赖Veeam的Instant VM Recovery和vPower NFS Service。 Veeam Backup &amp;amp; Replication对Application Group和被验证的虚拟机执行一系列的自动化校验测试，通常包含虚拟机心跳、网络ping和应用程序脚本测试，其中应用程序脚本可以通过自定义的方式加入。 在基础验证完成后，还可以选择让Veeam SureBackup对备份存档从文件层面执行一次CRC校验，确保在执行任务的过程中未修改原始备份存档。 在SureBackup任务结束后，Veeam Backup &amp;amp; Replication对这些虚拟机执行“Unpublish“动作，并且生成一份测试报告，此报告会通过Email的方式发送给指定的管理员。   在整个验证过程中，Veeam会保证所有虚拟机的备份存档处于只读状态，所有因虚拟机运行产生的数据会存放在虚拟机Redo Log中，这些Redo Log通常会存放于VMware的生成存储上，而当验证过程结束时，Veeam会删除这些Redo Log，释放临时空间。
验证过程中的组件 和通常备份的基础架构不一样的是，执行Veeam SureBackup时，会需要用到几个SureBackup专用的对象。
 Application Group - 在验证某些虚拟机时，这些虚拟机需要依赖一些其他的虚拟机才能正常启动和工作，Application Group就是为这些虚拟机正常工作提供所需的其他依赖应用程序和服务。通常我们会将运行这些应用程序和服务的虚拟机放入应用组，为验证提供依赖条件。举例来说，当我们需要去验证一台Exchange服务器时，该Exchange服务的启动需要有AD和DNS服务，因此，我们可以在Application Group中加入提供AD和DNS服务的虚拟机，用来为Exchange提供启动依赖。 Virtual Lab - 这是一个隔离的虚拟化沙盒环境，Application Group中的虚拟机和被验证的虚拟机都会在这个沙盒中启动起来。 SureBackup Job - 这是来自动或者手动执行验证备份存档的任务。它能够定时定期执行，也能够手动执行。  SureBackup 实战 如上面提到的，SureBackup有3个专用对象，因此在使用和配置SureBackup过程中显然需要进行这3个对象的设置。
Application Group 这也是整个生产环境基础架构中最最重要的服务之一，其他应用程序的启动和运行都依赖这些机器。简单来说，Application Group就是定义一组虚拟机，这组虚拟机非常重要，其他被验证的虚拟机没有这组虚拟机无法工作。也就是当我们的环境中存在这样的虚拟机，那我们就需要将他定义为Application Group，以便其他机器在被校验时能够访问到这些虚拟机和服务。
当然，Application Group中的这些虚拟机也是从备份镜像中启动起来，需要预先被备份，而不是直接使用生产环境的虚拟机。SureBackup对于Application Group中的虚拟机，也会定义一系列的校验和检测，确保Application Group中的虚拟机首先正常工作，然后才开始后续的其他虚拟机验证。当Application Group中的虚拟机验证失败的情况下，SureBackup将会中止工作，不会继续后续的虚拟机验证，这是因为SureBackup默认Application Group无法正常工作的情况下其他被验证的虚拟机也无法正常启动。因此，请不要在Application Group中放置非必要的虚拟机；如果被验证的虚拟机无需其他应用程序和服务依赖，则请不要在Application Group中放置虚拟机。</description>
    </item>
    
    <item>
      <title>新年第一篇 - Veeam 9.5U3集中管理Agent详解</title>
      <link>https://newblog.backupnext.cloud/post/2018-01-01-centrilized-agent-management/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://newblog.backupnext.cloud/post/2018-01-01-centrilized-agent-management/</guid>
      <description>VBR中的Agent集中管理 本次更新加入了Agent的集中管理，界面上发生了很大变化，原有的Backup &amp;amp; Replication更名成为Home，而原有的Virtual Machine更名为Inventory。Agent的管理功能都会搬到Inventory下面的Physical &amp;amp; Cloud Infrastructure下。
Veeam管理Agent的方式还是和其他Veeam的功能非常类似，非常简单的3部曲方式：
 创建Protection Group – 定义并自动发现需要保护的对象。 创建Job或者Policy – 定义备份任务或者备份策略实现备份。 执行Restore – 通过多种还原手段实现数据还原。  我们先来一起熟悉下Physical &amp;amp; Cloud Infrastructure界面。
在这个节点中会出现一些类似文件夹的图标，在软件升级完成后，会立刻出现Manually Added、Unmanaged这两个系统内置文件夹，而在我们开始创建新的Protection Group后，又会出现一些我们创建的文件夹，每一个文件夹就是一个Protection Group，里面会包含一组需要保护的服务器或者工作站。
创建Protection Group
又是老套路，Veeam经典的向导式操作方式，创建Protection Group
支持3种添加Protection Group的方式，其实也就是3种不同的服务器/工作站添加模式
 Individual computers  这种方式可以手工逐台Computers添加，支持Host Name或者IP address，然后Credentials中输入合适的账号密码即可。
 Microsoft Active Directory objects  这种方式需要先点击Change按钮设定AD相关信息，包括AD的域名和域管理员账号，然后就可以找到AD中的所有对象，按照对象的方式动态添加被保护的服务器/工作站。
自动排除不需要使用Agent进行保护的对象，特别是虚拟机。
 Computers from CSV files  这种模式只需手工编辑host name或者ip地址到一个CSV文件，然后指定从这个文件读取host列表即可。
为不同的Host分别指定合适的管理员账号。
设定自动发现和扫描的间隔，在扫描完成后是否进行Agent和Windows CBT驱动的自动推送安装，安装完成后如果有需要重新启动，是否自动启动。
检测推送分发Agent的服务器的状态，检测完成后，Protection Group就创建完成了。
Veeam Agent for Windows和Veeam Agent for Linux略有不同，我们先看看Windows的。</description>
    </item>
    
    <item>
      <title>无代理备份和应用程序感知</title>
      <link>https://newblog.backupnext.cloud/post/2017-07-23-agentless-backup/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://newblog.backupnext.cloud/post/2017-07-23-agentless-backup/</guid>
      <description>虚拟化技术是一个彻底改变IT世界的技术，同样在备份领域随着虚拟化技术的使用引入的无代理备份概念也不断对传统技术带来冲击。但是作为一对互相矛盾的技术 - 代理备份和无代理备份，其各自的优缺点也是相当明显。然而Veeam的无代理备份技术则是发挥了两者绝大多数的优势，实现了无代理备份的同时能感知应用程序。
什么是代理（Software Agent）？
这个IT专业词汇其实在中文上来说，并没办法给出很好很明确的定义，以致我们日常在技术交流的时候会含糊其辞，有时候会谈广义的代理，有时候会谈狭义的代理。我试着去从百度百科找找代理的定义，结果还是无功而返。而在wikipedia上，倒是有Software Agent的定义，不过也只是通过大众的认知给了一些Software Agent的应具备的特性：
 持续运行 - 通常会保持运行状态，即使空闲时候也会处于等待状态。 自动自主运行 - 无需人工干预和交互就能保持运行状态。 应用程序交互功能 - 能够和其他程序发生交互，激活其他模块、互相通讯、协同工作。  仔细琢磨了下，确实传统领域的代理备份，那些代理软件倒是符合这些Agent应具备的特性。
Veeam无代理备份和应用程序感知
Veeam的虚拟化备份技术，是不需要在任何的操作系统内安装任何这类的程序，因此备份不需要系统的运行状态。
而应用程序感知则是在备份过程中，Veeam全自动的到操作系统内运行一个进程，完成相应的应用程序感知、一致性保障和文件系统一致性处理，之后关闭应用程序，退出执行。这一过程只是在备份执行过程中的一个可选进程，因此是完全不同于上述的代理程序。
所以，通常代理程序会面临的问题，对于备份代理一样会碰到：
 需要不停的为新部署的虚拟机，手工安装代理程序（我们认为推送虽然方便，但也是“手工”的一种，避免不了远程/本地的配置工作）； 软件更新的时候，需要为每一台机器升级代理； 在长期大规模环境的运行过程中，还需要考虑拿个什么软件去监控这些代理，我们所谓代理保姆，就是干这事的，防止哪天这些代理突然不工作了也没人知道； 以上这些都是长期消耗计算资源的，包括CPU、内存、网络、存储，并且很多时候是重复的消耗。  而Veeam的技术，在深入到应用程序层面的感知进程，仅仅是在备份启动那一刻运行几分钟后立刻被关闭退出，因此完全不存在以上提及的这些问题。无需每次部署/无需更新/不用长期运行监控。
更有意思的是，现在的IT世界是一个运行越多风险越大的世界。我们没有任何应用程序的时候，就是一个最最安全的状态，而每增加一个应用程序，就多一份被黑客、病毒、勒索软件攻击的风险。为每一个系统减少一份持续运行应用程序，就是为我们的系统安全增加一份保障。
另外，如果系统关机了，那么需要保持运行才能进行备份的代理程序就彻底歇菜了。备份目标Offline，这是传统备份软件界面中常常见到的事情，这时候备份管理员能做的唯一事情就是去找到应用或者基础架构的管理员去启动这个操作系统。而对于无代理的技术，即使是系统关机的情况下，备份依然不受影响。而还原过程中，Veeam的多样化的颗粒度恢复却依然可以手工执行，堪称是完美的备份和还原。
传统代理的更多缺陷
利用代理技术的数据备份，绝大多数依赖网络。当我们为了隔离安全，去架构DMZ区域，去进行严格的出入规则的时候，突然发现因为买备份这个保险，我们不得不需要有个数据流去DMZ区域完成数据的抽取，以致原先的完全隔离的架构被打破，苦心设计的完美架构失去了其原本的设计目标。
Veeam的这种应用程序插入运行技术则完全不同于传统代理，在感知应用程序时，这个运行执行可以通过VIX在无网络连通的状态下进行Hypervisor层面的感知。因此，在Veeam的设计理念中，可以为那些DMZ区域的备份带来更多一份的安全。</description>
    </item>
    
    <item>
      <title>送 | 为裸奔中的电脑送一个备份保护</title>
      <link>https://newblog.backupnext.cloud/post/2019-07-02-agent-backup/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://newblog.backupnext.cloud/post/2019-07-02-agent-backup/</guid>
      <description>上一个时代的Norton Ghost 不知道有多少人还记得Norton Ghost，我对于Ghost的记忆要追溯到刚接触到PC那段时间，差不多20年前吧，那是在电脑城装完组装机，第一件事情就是使用Ghost做一个系统备份。
而也是从那时起，Ghost成为每一个电脑的标配。一直到10年前的Win7时代甚至是今天的Win10，很多个人电脑的启动项中还保留着两项，其中第二项就是，“使用一键Ghost恢复系统”。可以说，Ghost在那时，几乎是人手一个。
确实，Ghost非常好用，但是这已经是上一个时代的工具了，Symantec 旗下Norton Ghost团队也早在2013年3月底就停止更新和支持这款工具了。流传在民间的这一工具仅剩可用的版本也一直停留在v11版本，实在是有点可惜。
不过没关系，虽然Ghost没了，但是我们现在有了一个完美的替代品，这就是Veeam Agent for Microsoft Windows免费版！
今天的主题，我思考了许久，开始一直担心大家对免费软件的看法。通常我们大多数会想到的是，残缺的功能，黑心厂商为了赚钱挖了好多坑，使用中还会不断来一些广告和提醒，告诉你得赶紧付费了。这样的使用体验太崩溃，一般碰到这样的软件，我的大多数选择是卸载！
而Ghost的好用之处其实很大原因是当时的互联网并不发达，而这个软件本身也没有太多商业因素的考虑，很纯粹的软件，零广告零捆绑。我今天要安利的Veeam免费工具，在这点上和Ghost及其相似！
Veeam Agent for Microsoft Windows 免费版 同样是零广告零捆绑，下载安装即可使用，且功能全面。唯一缺点，我觉得就是暂时只有英文版了。不过问题不大，我今天就带大家Step by Step来一遍，保证你能用上它。
下载安装 下载安装非常简单，到Veeam官网https://www.veeam.com注册账号，进入下载页面，就能找到这个免费的软件下载。拿到最新版本VeeamAgentWindows_3.0.1.1039.exe后，双击就可以进入安装向导，整个安装过程只需要4步即可完成。
Step 1：有个简单的介绍，以及同意使用协议，有兴趣的朋友可以详细阅读，当然不想读也没问题，打钩2个&amp;quot;I accept&amp;quot; 就能激活Install按钮。
**Step 2：**自动安装，注意这里不能更改安装路径，软件会自动装入Windows的默认软件安装目录中。
**Step 3：**大约几分钟后，安装完成，如果有在电脑上插入了usb外置驱动器设备，会自动发现外置usb驱动器设备，并提示配置备份作业。我们可以跳过这个步骤不配置。
**Step 4：**在最后一步，会提示软件已经安装成功，并且会提示创建还原用的Recovery Media。这个还原介质非常重要，它将能够在你的系统全部崩溃后帮你恢复你的系统和数据。
安装完成后的第一件事：恢复盘创建 这个步骤也非常简单，标准的Veeam式向导会带大家完成创建过程。
Step 1: 点击Finish按钮之后，就会进入Recovery Media创建向导，过程也非常简单，首先选择可启动的介质类型，这里可以是ISO镜像也可以是U盘，如果有插入恢复用U盘的话，可以直接选择该U盘，在我的这个介绍中，我们选择ISO镜像，其过程和U盘大同小异，并且未来ISO镜像也可以通过其他途径做成U盘。
Step 2: 这里默认Veeam会提供两个非常有用的选项，就是网卡驱动和网络配置，这对于从网络上恢复数据非常有帮助，减少了恢复时的一些配置步骤。选择ISO image file之后点击next进入下一步，会提示ISO文件的存放路径，这里可以是本地路径，也可以是网络UNC路径，如果是CIFS共享的UNC路径，可能需要提供用户名密码。
Step 3: 点击下一步，是一个Summary界面，告诉您刚刚配了些什么。
Step 4: 点击Create就能创建这个ISO镜像了。几分钟之后，这个恢复盘就创建好了，做恢复的时候用它引导启动就对了，当然这个ISO中并不完全包含数据。
备份作业配置 打开Veeam Control Panel，软件会提示一下，是否在免费版模式运行，还是输入一个商业版授权，这也是这个软件仅有的唯一一次提示，只需要点击否，继续运行免费版即可。
点击右上角的三条线图标后打开主菜单，点击加号Add New Job开始创建备份作业。
备份作业创建过程也非常简单，依旧是经典的Veeam式向导。
Step 1： 定义一个备份作业名称，写上一些描述说明。
Step 2： 选择备份模式，对于免费版来说，可以选择备份完整计算机以及外置USB驱动器，也可以选择备份某个磁盘卷，还能够备份部分文件。我们选择备份完整计算机。
Step 3： 选择备份目的地，这时候可以是USB、火线、eSATA等等各种连接方式的硬盘，也可以是网络上共享的NAS卷还可以是Veeam集中管理的备份存储等等。因为是个人用途，我们一般会选择备份至移动硬盘，或者是家用NAS中，本例子中，我选择将数据备份至家里的群晖NAS上。</description>
    </item>
    
  </channel>
</rss>
